ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
ФАКУЛЬТЕТ КОМП'ЮТЕРНИХ НАУК
КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ




ЗВІТ
з лабораторної роботи №3
з дисципліни «Архітектура програмного забезпечення»
на тему: «РОЗРОБКА ВЕБКЛІЄНТА СИСТЕМИ»




Виконав 
ст. гр. ПЗПІ-22-3 
Ткаченко Євген Андрійович

Перевірив 
ст. викладач кафедри ПІ 
Сокорчук Ігор Петрович






 
Харків 2025
1 ІСТОРІЯ ЗМІН

№ ДатаВерсія звіту Опис змін та виправлень 1 01.06.20250.1 Створено розділ «Історія змін» 2 01.06.20250.1 Створено розділ «Завдання», Опис виконаної роботи» та «Висновки» 3 02.06.20250.1 Заповнено додаток Б з графічними матеріалами 4 02.06.20250.1 Заповнено додаток В з програмним кодом 5 02.06.20250.1 Наведено посилання на відеозапис. Заповнено додаток А. 
2 ЗАВДАННЯ

     Метою даного лабораторного заняття є розробка клієнтської / front-end частини програмної системи.
     
3 ОПИС ВИКОНАНОЇ РОБОТИ
     
  В межах виконання лабораторної роботи було реалізовано повноцінну систему для моніторингу фізичної активності, зокрема — підтягувань. Розробку здійснено із використанням технологічного стеку Vue.js + Tailwind CSS на фронтенді та Java Spring Boot на бекенді.
  Основна реалізація:
  авторизація та реєстрація;
• створення та перегляд тренувань;
• моніторинг техніки підтягувань;
• панель адміністратора для управління користувачами;
• Було створено низку компонентів, зокрема: MetricsChart.vue, RecommendationsPage.vue, AdminPage.vue;
• Створення тренувальної сесії (session) з фіксованим типом вправи (підтягування) ;
• Автоматичне надсилання даних з апаратного пристрою (висота тіла, кут нахилу) кожні кілька секунд;
• Побудова графіка параметрів кожної сесії: висота підтягування та нахил тулуба;
• Генерація рекомендацій на основі середніх значень техніки: глибина підйому, симетрія тіла, ритм виконання;
• Збереження історії тренувань з відображенням часу та індивідуальних метрик;
• Перегляд списку всіх зареєстрованих користувачів;
• Можливість видалення користувачів (крім адміністратора) ;
• Інтерфейс з таблицею користувачів та адаптивним дизайном;
• Рефреш метрик на графіку в реальному часі (без перезавантаження сторінки) ;
• Адаптивний дизайн під різні пристрої;
• Кешування userId та токена авторизації у localStorage;
• Маршрутизація між сторінками за допомогою vue-router.
  Приклади коду клієнтської частини наведені у додатку В, відеодемонстрацію роботи системи - у додатку А а рисунки у додатку Б.
     
     
ВИСНОВКИ

     Розробив клієнтську частину програмної системи.
     
     
     
ДОДАТОК А
Відеозапис
     
     Відеозапис презентації результатів лабораторної роботи: https://youtu.be/ed81Kf-vLtI

     Хронологічний опис відеозапису:
     00:00 Вітання
     00:50 Реєстрація
     01:14 Нове тренування
     02:22 Перегляд бізнес логіки підтягувань
     03:00 Рекомендації щодо підтягувань
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
ДОДАТОК Б 
Графічні матеріали


Рисунок Б.1 – ER-діаграма даних


Рисунок Б.2 – Структура бази даних



Рисунок Б.3 – UML-діаграма прецедентів






















ДОДАТОК В 
Програмний код

     В.1 Адміністратор. Фронтенд частина.
     
     GitHub репозиторій: https://github.com/NureTkachenkoYevhen/apz-pzpi-22-3-tkachenko-yevhen/blob/main/Lab3/pzpi-22-3-tkachenko-yevhen-lab3/fitness-frontend/src/pages/AdminPage.vue
     
     1. <!-- src/pages/AdminPage.vue -->
     2. <template>
     3.     <div>
     4.       <h2 class="text-2xl font-bold mb-4">Користувачі</h2>
     5.   
     6.       <table class="w-full text-left border">
     7.         <thead>
     8.           <tr class="bg-gray-200">
     9.             <th class="p-2">ID</th>
     10.             <th class="p-2">Ім’я</th>
     11.             <th class="p-2">Email</th>
     12.             <th class="p-2">Зріст</th>
     13.             <th class="p-2">Дії</th>
     14.           </tr>
     15.         </thead>
     16.         <tbody>
     17.           <tr v-for="user in users.items" :key="user.userId">
     18.             <td class="p-2">{{ user.userId }}</td>
     19.             <td class="p-2">{{ user.username }}</td>
     20.             <td class="p-2">{{ user.email }}</td>
     21.             <td class="p-2">{{ user.height }} см</td>
     22.             <td class="p-2 space-x-2">
     23.               <button class="text-red-600" @click="deleteUser(user.userId)" :disabled="user.userId === 1">
     24.                 Видалити
     25.               </button>
     26.             </td>
     27.           </tr>
     28.         </tbody>
     29.       </table>
     30.     </div>
     31.   </template>
     32.   
     33.   <script setup>
     34.   import { onMounted } from 'vue'
     35.   import { useUsersStore } from '../stores/users'
     36.   import { useAuthStore } from '../stores/auth'
     37.   import { useRouter } from 'vue-router'
     38.   
     39.   const auth = useAuthStore()
     40.   const router = useRouter()
     41.   
     42.   // Якщо не адмін — перенаправити
     43.   if (auth.getUserId !== '1') {
     44.     router.push('/sessions')
     45.   }
     46.   
     47.   const users = useUsersStore()
     48.   onMounted(users.fetchAll)
     49.   
     50.   const deleteUser = async (id) => {
     51.     if (confirm('Ви впевнені, що хочете видалити користувача?')) {
     52.       await users.deleteUser(id)
     53.     }
     54.   }
     55.   </script> 
2


